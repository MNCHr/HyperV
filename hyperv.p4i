# 1 "src/hyperv.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src/hyperv.p4"
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

# 1 "src/include/intrinsic.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * queuing_metadata_t
 * Metadata related metadata.
 */
header_type queueing_metadata_t {
    fields {
        enq_timestamp : 48;
        enq_qdepth : 16;
        deq_timedelta : 32;
        deq_qdepth : 16;
    }
}

metadata queueing_metadata_t queueing_metadata;


/**
 * intrinsic_metadata_t
 * Predefined metadate related with targets.
 */
header_type intrinsic_metadata_t {
    fields {
        ingress_global_timestamp : 48;
        lf_field_list : 8 ;
        mcast_grp : 16;
        egress_rid : 16;
        resubmit_flag : 8 ;
        recirculate_flag : 8 ;
        qid : 8 ;
    }
}

metadata intrinsic_metadata_t intrinsic_metadata;
# 17 "src/hyperv.p4" 2
# 1 "src/include/define.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// primitive actions
# 59 "src/include/define.p4"
// MASK
# 86 "src/include/define.p4"
// STAGE
# 107 "src/include/define.p4"
// Match bitmap
# 18 "src/hyperv.p4" 2
# 1 "src/include/action.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.

 *

 * Licensed under the Apache License, Version 2.0 (the "License");

 * you may not use this file except in compliance with the License.

 * You may obtain a copy of the License at

 *

 *   http://www.apache.org/licenses/LICENSE-2.0

 *

 * Unless required by applicable law or agreed to in writing, software

 * distributed under the License is distributed on an "AS IS" BASIS,

 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

 * See the License for the specific language governing permissions and

 * limitations under the License.

 */
# 16 "src/include/action.p4"
//***********************************************************
//				       HyperV primitives
//***********************************************************

/**

 * No operation.

 */
# 23 "src/include/action.p4"
action noop() {

}

/**

 * Count packets with global register.

 * @param index <> packet counter index.

 */
# 31 "src/include/action.p4"
action packet_count(index) {
 register_read(context_metadata.count, global_register, index);
 register_write(global_register, // Global register 
       index,
       context_metadata.count + 1);
}

/**

 * Clear packet counter.

 * @param index <> pakcet counter index

 */
# 42 "src/include/action.p4"
action packet_count_clear(index) {
 register_write(global_register, index, 0);
}

/**

 * Loop back packets.

 */
# 49 "src/include/action.p4"
action do_loopback() {
 modify_field(standard_metadata.egress_spec,
  standard_metadata.ingress_port);
}


/**

 * Set the multicast group.

 * @param mcast_grp <> multicast group ID. 

 */
# 59 "src/include/action.p4"
action do_multicast(mcast_grp) {
 modify_field(intrinsic_metadata.mcast_grp, mcast_grp);
}

/**

 * Set the queue id.

 * @param qid <> queue id

 */
# 67 "src/include/action.p4"
action do_queue(qid) {
 modify_field(intrinsic_metadata.qid, qid);
}

/**

 * Forward packets

 * @param port  destination ports

 */
# 75 "src/include/action.p4"
action do_forward(port) {
 modify_field(standard_metadata.egress_spec, port);
}

/**

 * Drop packets.

 */
# 82 "src/include/action.p4"
action do_drop() {
 drop();
}


/**

 * Generate digest to the CPU receiver.

 * @param receiver

 */
# 91 "src/include/action.p4"
action do_gen_digest(receiver) {
 generate_digest(receiver, digest_list);
}


/**

 * Add header fileds with const integers.

 * @param value1 <header length> value of the const.

 * @param mask1 <header length> value mask.

 */
# 101 "src/include/action.p4"
action do_add_header_with_const(value1, mask1) {
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (user_metadata.load_header + value1) & mask1);
}

/**

 * Add user-defined metadata with const integers.

 * @param value1 <metadata length> value of the const.

 * @param mask1 <metadata length> value mask.

 */
# 111 "src/include/action.p4"
action do_add_meta_with_const(value1, mask1) {
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (user_metadata.meta + value1) & mask1);
}

/**

 * Add header with the header values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 122 "src/include/action.p4"
action do_add_header_with_header(left1,
         right1,
         mask1) {
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (user_metadata.load_header + (((user_metadata.load_header<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Add user defiend metadata with the header values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 135 "src/include/action.p4"
action do_add_meta_with_header(left1,
                               right1,
                               mask1) {
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (user_metadata.meta + (((user_metadata.load_header<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Add header with the metadata values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 148 "src/include/action.p4"
action do_add_header_with_meta(left1,
          right1,
          mask1) {
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (user_metadata.load_header + (((user_metadata.meta<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Add metadata with the metadata values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 161 "src/include/action.p4"
action do_add_meta_with_meta(left1,
        right1,
        mask1) {
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (user_metadata.meta + (((user_metadata.meta<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Substract header with the const values.

 * @param value1 <header length> the const value

 * @param mask1 <header length> value mask

 */
# 173 "src/include/action.p4"
action do_subtract_const_from_header(value1, mask1) {
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (user_metadata.load_header - value1) & mask1);
}

/**

 * Substract metadata with the const values.

 * @param value1 <header length> the const value

 * @param mask1 <header length> value mask

 */
# 183 "src/include/action.p4"
action do_subtract_const_from_meta(value1, mask1) {
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (user_metadata.meta - value1) & mask1);
}

/**

 * Substract header with the header values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 194 "src/include/action.p4"
action do_subtract_header_from_header(left1,
           right1,
           mask1) {
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (user_metadata.load_header - (((user_metadata.load_header<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Substract header with the metadata values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 207 "src/include/action.p4"
action do_subtract_header_from_meta(left1,
         right1,
         mask1) {
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (user_metadata.meta - (((user_metadata.load_header<<left1)>>right1)&mask1)) & mask1);
}


/**

 * Substract metadata with the header values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 221 "src/include/action.p4"
action do_subtract_meta_from_header(left1, right1, mask1) {
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (user_metadata.load_header - (((user_metadata.meta<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Substract metadata with the metadata values.

 * @param left1 <header length> left shift

 * @param right1 <header length>  right shift

 * @param mask1 <header length> value mask

 */
# 232 "src/include/action.p4"
action do_subtract_meta_from_meta(left1, right1, mask1) {
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (user_metadata.meta - (((user_metadata.meta<<left1)>>right1)&mask1)) & mask1);
}

/**

 * Add a header into the packet.

 * @param value <header length> left shift

 * @param mask1  <header length> value mask

 * @param mask2  <header length> value mask

 * @param length1 <header length> header length

 */
# 244 "src/include/action.p4"
action do_add_header_1(value,
        mask1,
        mask2,
        length1) {
 push(byte_stack, length1*1);

 bit_or(user_metadata.load_header, user_metadata.load_header & mask1,
  (user_metadata.load_header & (~mask1) )>>(length1*8));
 add_to_field(desc_hdr.len, length1);
 do_mod_header_with_const(value, mask2);
 modify_field(desc_hdr.len, desc_hdr.len);

 modify_field(vdp_metadata.remove_or_add_flag, 1);
 modify_field(vdp_metadata.mod_flag, 1);
}

/**

 * Remove a header form the packet.

 * @param value1 <header length> left shift

 * @param mask1  <header length> value mask

 * @param mask2  <header length> value mask

 * @param length1 <header length> header length

 */
# 267 "src/include/action.p4"
action do_remove_header_1(mask1, mask2, length1) {
 push(byte_stack, length1*1);
 subtract_from_field(desc_hdr.len, length1);

 modify_field(byte_stack[0].byte, desc_hdr.flag);
 modify_field(byte_stack[1].byte, desc_hdr.len);
 modify_field(byte_stack[2].byte, (vdp_metadata.vdp_id>>16)&0xFF);
 modify_field(byte_stack[3].byte, (vdp_metadata.vdp_id) & 0xFF);

 remove_header(desc_hdr);

 bit_or(user_metadata.load_header, user_metadata.load_header & mask1,
  (user_metadata.load_header & mask2)<<(length1*8));

 modify_field(vdp_metadata.remove_or_add_flag, 1);
 modify_field(vdp_metadata.mod_flag, 1);
}

/**

 * Modify header with one const value.

 * @param value <header length> left shift

 * @param mask1  <header length> value mask

 * @param length1 <header length> value mask

 */
# 291 "src/include/action.p4"
action do_mod_header_with_const(value, mask1) {
 bit_or(user_metadata.load_header, (user_metadata.load_header & (~mask1)), (value & mask1));
 modify_field(vdp_metadata.mod_flag, 1);
}

/**

 * Modify header with one const value, meanwhile re-calculate the checksum (inline).

 * @param value1 <header length> left shift

 * @param mask1  <header length> value mask

 * @param length1 <header length> value mask

 */
# 302 "src/include/action.p4"
action do_mod_header_with_const_and_checksum(value,
               mask1,
               value1,
               value2,
               offset1) {
 do_mod_header_with_const(value, mask1);
 do_update_transport_checksum(value1,
   value2, offset1);
}

/**

 * Modify header with one const value, meanwhile re-calculate the checksum (inline).

 * @param value <header length>  the const value.

 * @param mask1  <header length> value mask

 */
# 317 "src/include/action.p4"
action do_mod_meta_with_const(value, mask1) {
 bit_or(user_metadata.meta, (user_metadata.meta & ~mask1),
  (value & mask1));
}

/**

 * Modify standard metadata fields.

 * @param val1  <>

 * @param mask1 <>

 * @param val2  <>

 * @param mask2 <>

 * @param val3  <>

 * @param mask3 <>

 * @param val4  <>

 * @param mask4 <>

 */
# 333 "src/include/action.p4"
action do_mod_std_meta(val1, mask1,
        val2, mask2,
        val3, mask3,
        val4, mask4) {
 bit_or(standard_metadata.egress_spec,
  standard_metadata.egress_spec & (~mask1), val1 & mask1);
 bit_or(standard_metadata.egress_port,
  standard_metadata.egress_port & (~mask2), val2 & mask2);
 bit_or(standard_metadata.ingress_port,
  standard_metadata.ingress_port & (~mask3), val3 & mask3);
 bit_or(standard_metadata.packet_length,
  standard_metadata.packet_length & (~mask4), val4 & mask4);
}

/**

 * Modify header with the one metadata field.

 * @param value1 <header length> left shift

 * @param mask1  <header length> value mask

 * @param length1 <header length> value mask

 */
# 353 "src/include/action.p4"
action do_mod_header_with_meta_1(left1,
         right1,
         mask1) {
    bit_or(user_metadata.load_header, (user_metadata.load_header & ~mask1),
   (((user_metadata.meta << left1) >> right1) & mask1));
 modify_field(vdp_metadata.mod_flag, 1);
}

/**

 * Modify header with the two metadata fields.

 * @param left1  <header length> left shift

 * @param right1   <header length> right shift

 * @param mask1 <header length> value mask

 * @param left2  <header length> left shift

 * @param right2   <header length> right shift

 * @param mask2 <header length> value mask

 */
# 370 "src/include/action.p4"
action do_mod_header_with_meta_2(left1, right1, mask1,
         left2, right2, mask2) {
    do_mod_header_with_meta_1(left1, right1, mask1);
 do_mod_header_with_meta_1(left2, right2, mask2);
}

/**

 * Modify header with the three metadata fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 * @param left3  	<header length> left shift

 * @param right3   	<header length> right shift

 * @param mask3 	<header length> value mask

 */
# 388 "src/include/action.p4"
action do_mod_header_with_meta_3(left1, right1, mask1,
         left2, right2, mask2,
         left3, right3, mask3) {
    do_mod_header_with_meta_1(left1, right1, mask1);
 do_mod_header_with_meta_1(left2, right2, mask2);
 do_mod_header_with_meta_1(left3, right3, mask3);
}

/**

 * Modify metadata with the one metadata field.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 */
# 402 "src/include/action.p4"
action do_mod_meta_with_meta_1(left1, right1, mask1) {
    bit_or(user_metadata.meta, (user_metadata.meta & ~mask1),
  (((user_metadata.meta << left1) >> right1) & mask1));
}

/**

 * Modify metadata with the two metadata fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 */
# 416 "src/include/action.p4"
action do_mod_meta_with_meta_2(left1, right1, mask1,
          left2, right2, mask2) {
    do_mod_meta_with_meta_1(left1, right1, mask1);
 do_mod_meta_with_meta_1(left2, right2, mask2);
}

/**

 * Modify metadata with the three metadata fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 * @param left3  	<header length> left shift

 * @param right3   	<header length> right shift

 * @param mask3 	<header length> value mask

 */
# 434 "src/include/action.p4"
action do_mod_meta_with_meta_3(left1, right1, mask1,
          left2, right2, mask2,
          left3, right3, mask3) {
 do_mod_meta_with_meta_1(left1, right1, mask1);
 do_mod_meta_with_meta_1(left2, right2, mask2);
 do_mod_meta_with_meta_1(left3, right3, mask3);
}

/**

 * Modify header with the one header field.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 */
# 448 "src/include/action.p4"
action do_mod_header_with_header_1(left1, right1, mask1) {
    bit_or(user_metadata.meta, (user_metadata.load_header & ~mask1),
  (((user_metadata.load_header << left1) >> right1) & mask1));

 modify_field(vdp_metadata.mod_flag, 1);
}

/**

 * Modify header with the three header fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 */
# 464 "src/include/action.p4"
action do_mod_header_with_header_2(left1, right1, mask1,
           left2, right2, mask2) {
    do_mod_header_with_header_1(left1, right1, mask1);
 do_mod_header_with_header_1(left2, right2, mask2);
}

/**

 * Modify header with the three header fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 * @param left3  	<header length> left shift

 * @param right3   	<header length> right shift

 * @param mask3 	<header length> value mask

 */
# 482 "src/include/action.p4"
action do_mod_header_with_header_3(left1, right1, mask1,
           left2, right2, mask2,
           left3, right3, mask3) {
    do_mod_header_with_header_1(left1, right1, mask1);
 do_mod_header_with_header_1(left2, right2, mask2);
 do_mod_header_with_header_1(left3, right3, mask3);
}

/**

 * Modify metadata with the one header field.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 */
# 496 "src/include/action.p4"
action do_mod_meta_with_header_1(left1, right1, mask1) {
    bit_or(user_metadata.meta, (user_metadata.load_header & ~mask1),
  (((user_metadata.load_header << left1) >> right1) & mask1));
}

/**

 * Modify metadata with the two header fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 */
# 510 "src/include/action.p4"
action do_mod_meta_with_header_2(left1, right1, mask1,
         left2, right2, mask2) {
    do_mod_meta_with_header_1(left1, right1, mask1);
 do_mod_meta_with_header_1(left2, right2, mask2);
}

/**

 * Modify metadata with the three header fields.

 * @param left1  	<header length> left shift

 * @param right1   	<header length> right shift

 * @param mask1 	<header length> value mask

 * @param left2  	<header length> left shift

 * @param right2   	<header length> right shift

 * @param mask2 	<header length> value mask

 * @param left3  	<header length> left shift

 * @param right3   	<header length> right shift

 * @param mask3 	<header length> value mask

 */
# 528 "src/include/action.p4"
action do_mod_meta_with_header_3(left1, right1, mask1,
    left2, right2, mask2, left3, right3, mask3) {
    do_mod_meta_with_header_1(left1, right1, mask1);
 do_mod_meta_with_header_1(left2, right2, mask2);
 do_mod_meta_with_header_1(left3, right3, mask3);
}


/**

 * Recirculate packets at  the egress pipeline.

 * @param progid Pragram ID

 */
# 540 "src/include/action.p4"
action do_recirculate(progid) {
 modify_field(vdp_metadata.recirculation_flag, 1);
 modify_field(vdp_metadata.remove_or_add_flag, 0);
 modify_field(vdp_metadata.inst_id, progid);
 recirculate( flInstance_with_umeta );
}

/**

 * Resubmit packet at the ingress pipeline.

 * @param progid Pragram ID

 */
# 551 "src/include/action.p4"
action do_resubmit(progid) {
 modify_field(vdp_metadata.recirculation_flag, 1);
 modify_field(vdp_metadata.inst_id, progid);
 resubmit(flInstance_with_umeta);
}

/**

 * Load register value into the header.

 * @param index register index

 * @param left1 

 * @param mask1

 */
# 563 "src/include/action.p4"
action do_load_register_into_header(index,
             left1,
             mask1) {
 register_read(context_metadata.r5, global_register, index);
 bit_or(user_metadata.load_header, user_metadata.load_header & (~mask1),
  (context_metadata.r5<<left1) & mask1);

 modify_field(vdp_metadata.mod_flag, 1);
}

/**

 * Load register value into the metadata.

 * @param index register index

 * @param left1 

 * @param mask1

 */
# 579 "src/include/action.p4"
action do_load_register_into_meta(index,
          left1,
          mask1) {
 register_read(context_metadata.r5,
               global_register,
               index);
 bit_or(user_metadata.meta, user_metadata.meta & (~mask1),
  (context_metadata.r5<<left1) & mask1);
}


/**

 * Load the header field into the register.

 * @param index register index

 * @param right1 

 * @param mask1

 */
# 596 "src/include/action.p4"
action do_write_header_into_register(index,
             right1,
             mask1) {
 register_write(global_register, index,
  (user_metadata.load_header>>right1) & mask1);
}

/**

 * Load the metadata field into the register.

 * @param index register index

 * @param left1 

 * @param mask1

 */
# 609 "src/include/action.p4"
action do_wirte_meta_into_register(index, right1, mask1) {
 register_write(global_register, index,
  (user_metadata.meta>>right1) & mask1);
}

/**

 * Load the const value into the register.

 * @param index register index

 * @param value the const value to load

 */
# 619 "src/include/action.p4"
action do_wirte_const_into_register(index, value) {
 register_write(global_register, index, value);
}

/**

 * Return the hash header.

 */
# 626 "src/include/action.p4"
field_list hash_field_list {
 context_metadata.hash_header;
}

/**

 * Calculate the field list with CRC16 hash.

 */
# 633 "src/include/action.p4"
field_list_calculation hash_crc16 {
    input {
        hash_field_list;
    }
    algorithm : crc16;
    output_width : 16;
}

/**

 * Calculate the field list with CRC32 hash.

 */
# 644 "src/include/action.p4"
field_list_calculation hash_crc32 {
    input {
        hash_field_list;
    }
    algorithm : crc32;
    output_width : 32;
}

/**

 * Set the hash header.

 * @param hdr_mask 

 */
# 656 "src/include/action.p4"
action do_set_hash_hdr(hdr_mask) {
 modify_field(context_metadata.hash_header, user_metadata.load_header & hdr_mask);
}


/**

 * Calculate CRC16.

 */
# 664 "src/include/action.p4"
action do_hash_crc16(hdr_mask) {
 do_set_hash_hdr(hdr_mask);
 modify_field_with_hash_based_offset(context_metadata.hash, 0,
                                        hash_crc16, 65536);
}

/**

 * Calculate CRC32.

 */
# 673 "src/include/action.p4"
action do_hash_crc32(hdr_mask) {
 do_set_hash_hdr(hdr_mask);
 modify_field_with_hash_based_offset(context_metadata.hash, 0,
                                        hash_crc32, 0xFFFFFFFF);
}

/**

 * Select hash profile.

 */
# 682 "src/include/action.p4"
action_profile hash_profile {
 actions {
  do_forward;
  noop;
 }

 dynamic_action_selection : hash_action_selector;
}

/**

 * Perform hash calculation.

 */
# 694 "src/include/action.p4"
field_list_calculation hash_calculation {
 input {
  hash_field_list;
 }
 algorithm : crc16;
 output_width : 16;
}

/**

 * Select hash action.

 */
# 705 "src/include/action.p4"
action_selector hash_action_selector {
 selection_key : hash_calculation;
}
# 19 "src/hyperv.p4" 2
# 1 "src/include/config.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.

 *

 * Licensed under the Apache License, Version 2.0 (the "License");

 * you may not use this file except in compliance with the License.

 * You may obtain a copy of the License at

 *

 *   http://www.apache.org/licenses/LICENSE-2.0

 *

 * Unless required by applicable law or agreed to in writing, software

 * distributed under the License is distributed on an "AS IS" BASIS,

 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

 * See the License for the specific language governing permissions and

 * limitations under the License.

 */
# 19 "src/include/config.p4"
// Register width

// Number of global registers
# 20 "src/hyperv.p4" 2
# 1 "src/include/stateful.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/****************************************************
 * Global register
 * Reserved for user programs
 ***************************************************/
register global_register {
    width : 32;
    instance_count : 65536;
}
# 21 "src/hyperv.p4" 2
# 1 "src/include/control.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.

 *

 * Licensed under the Apache License, Version 2.0 (the "License");

 * you may not use this file except in compliance with the License.

 * You may obtain a copy of the License at

 *

 *   http://www.apache.org/licenses/LICENSE-2.0

 *

 * Unless required by applicable law or agreed to in writing, software

 * distributed under the License is distributed on an "AS IS" BASIS,

 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

 * See the License for the specific language governing permissions and

 * limitations under the License.

 */
# 20 "src/include/control.p4"
# 1 "src/include/define.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// primitive actions
# 59 "src/include/define.p4"
// MASK
# 86 "src/include/define.p4"
// STAGE
# 107 "src/include/define.p4"
// Match bitmap
# 21 "src/include/control.p4" 2

//-----------------------------------------------------
// Actions for control logic
//-----------------------------------------------------

//----------------- ingress ---------------------------
table table_config_at_initial {
 reads{
  vdp_metadata.vdp_id : exact ;
  vdp_metadata.inst_id : exact ;
  vdp_metadata.stage_id : exact ;
 }
 actions{
  set_initial_config;
  set_initial_config_new;
 }
}

table table_config_at_end {
 reads{
  vdp_metadata.vdp_id : exact ;
  vdp_metadata.inst_id : exact ;
  vdp_metadata.stage_id : exact ;
 }
 actions{
  do_resubmit;
 }
}

//-----------------------------------------------------
action set_match_result (match_result) {
 bit_or(vdp_metadata.match_chain_result, match_result, vdp_metadata.match_chain_result);
}

//-----------------------------------------------------
action set_action_id(match_result, action_bitmap,
                match_bitmap, next_stage, next_prog) {
 set_match_result(match_result);
 set_stage_and_bitmap(action_bitmap,
        match_bitmap, next_stage, next_prog);
}


//-----------------------------------------------------
action set_next_stage(match_bitmap, next_stage, next_prog) {
 set_stage_and_bitmap(0, match_bitmap,
        next_stage, next_prog);
}
//hr-modified
action set_next_stage_extra(match_bitmap, next_stage, next_prog) {
 set_stage_and_bitmap(0, match_bitmap,
        next_stage, next_prog);
}

//-----------------------------------------------------
action end(next_prog) {
 set_action_id(0, 0, 0 , 0, next_prog);
}

//-----------------------------------------------------
action set_stage_and_bitmap (action_bitmap,
                match_bitmap , next_stage, next_prog) {
 modify_field(vdp_metadata.action_chain_bitmap, action_bitmap);
 modify_field(vdp_metadata.match_chain_bitmap, match_bitmap);
 modify_field(vdp_metadata.stage_id, next_stage);
 modify_field(vdp_metadata.inst_id, next_prog);
 modify_field(vdp_metadata.action_chain_id, vdp_metadata.match_chain_result);
 modify_field(vdp_metadata.match_chain_result, 0);
}

//-----------------------------------------------------
action set_action_id_direct (action_id, action_bitmap,
                match_bitmap , next_stage, next_prog) {
 modify_field(vdp_metadata.action_chain_bitmap, action_bitmap);
 modify_field(vdp_metadata.match_chain_bitmap, match_bitmap);
 modify_field(vdp_metadata.stage_id, next_stage);
 modify_field(vdp_metadata.inst_id, next_prog);
 modify_field(vdp_metadata.action_chain_id, action_id);
}

//-----------------------------------------------------
action set_match_result_with_next_stage (match_result,
        match_bitmap, next_stage) {
 modify_field(vdp_metadata.action_chain_bitmap, 0);
 modify_field(vdp_metadata.match_chain_bitmap, match_bitmap);
 modify_field(vdp_metadata.stage_id, next_stage);
 modify_field(vdp_metadata.match_chain_result, match_result);
}


//-----------------------------------------------------
action set_initial_config (progid, initstage,
                                        match_bitmap) {
 modify_field(vdp_metadata.inst_id , progid);
 modify_field(vdp_metadata.stage_id, initstage);
 modify_field(vdp_metadata.match_chain_bitmap, match_bitmap);
}

action set_initial_config_new (progid, initstage,
                                   match_bitmap) {
 modify_field(desc_hdr.vdp_id, vdp_metadata.vdp_id&0xFFEF);
 modify_field(vdp_metadata.inst_id , progid);
 modify_field(vdp_metadata.stage_id, initstage);
 modify_field(vdp_metadata.match_chain_bitmap, match_bitmap);
}

//----------------- Egress ----------------------------
table table_config_at_egress {
 reads{
  vdp_metadata.vdp_id : exact ;
  vdp_metadata.inst_id : exact ;
  vdp_metadata.stage_id : exact ;
 }
 actions {
  do_recirculate;
 }
}

table dh_deparse {
 actions {
  do_dh_deparse;
 }
}

//-----------------------------------------------------
action do_dh_deparse() {
 modify_field(user_metadata.load_header, desc_hdr.load_header);
}


//--------------Conditional Stage----------------------

//-----------------------------------------------------
action set_expr_header_op_const(l_expr_offset,
                            l_expr_mask, op, r_expr) {
 modify_field(context_metadata.left_expr,
        (user_metadata.load_header >> l_expr_offset)&l_expr_mask);
 modify_field(context_metadata.op, op);
 modify_field(context_metadata.right_expr, r_expr);
}


//-----------------------------------------------------
action set_expr_counter_op_const(r_expr) {
 modify_field(context_metadata.left_expr,
   context_metadata.count);
 modify_field(context_metadata.right_expr, r_expr);
}

//-----------------------------------------------------
action set_expr_meta_op_const(l_expr_offset,
                            l_expr_mask, op, r_expr) {
 modify_field(context_metadata.left_expr,
        (user_metadata.meta >> l_expr_offset)&l_expr_mask);
 modify_field(context_metadata.op, op);
 modify_field(context_metadata.right_expr, r_expr);
}

//-----------------------------------------------------
action set_expr_header_op_header(l_expr_offset,
        l_expr_mask, op, r_expr_offset, r_expr_mask) {
 modify_field(context_metadata.left_expr,
        (user_metadata.load_header >> l_expr_offset) & l_expr_mask);
 modify_field(context_metadata.op, op);
 modify_field(context_metadata.right_expr,
        (user_metadata.load_header >> r_expr_offset) & r_expr_mask);

}

//-----------------------------------------------------
action set_expr_meta_op_header(l_expr_offset,
        l_expr_mask, op, r_expr_offset, r_expr_mask) {
 modify_field(context_metadata.left_expr,
        (user_metadata.meta >> l_expr_offset)&l_expr_mask);
 modify_field(context_metadata.op, op);
 modify_field(context_metadata.right_expr,
        (user_metadata.load_header >> r_expr_offset) & r_expr_mask);
}

//-----------------------------------------------------
action set_expr_header_op_meta(l_expr_offset,
        l_expr_mask, op, r_expr_offset, r_expr_mask) {
 modify_field(context_metadata.left_expr,
        (user_metadata.load_header >> l_expr_offset)&l_expr_mask);
 modify_field(context_metadata.op, op);
 modify_field(context_metadata.right_expr,
        (user_metadata.meta >> r_expr_offset) & r_expr_mask);
}

//-----------------------------------------------------
action set_expr_meta_op_meta(l_expr_offset,
        l_expr_mask, op, r_expr_offset, r_expr_mask) {
 modify_field(context_metadata.left_expr,
        (user_metadata.meta << l_expr_offset)&l_expr_mask);
 modify_field(context_metadata.op, op);
 modify_field(context_metadata.right_expr,
        (user_metadata.meta << r_expr_offset) & r_expr_mask);
}
# 22 "src/hyperv.p4" 2
# 1 "src/include/headers.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/****************************************************
 * description_header_t
 * Descripe packet headers
 ***************************************************/
header_type description_hdr_t {
 fields {
  flag : 8 ;
  len : 8 ;
  vdp_id : 16;
  load_header : * ;
 }

 length : len;
 max_length : 128;
}

header description_hdr_t desc_hdr;

/****************************************************
 * byte_stack_t
 * Used for add_headers, remove_header, push, and  * pop operations
s
 ***************************************************/
header_type byte_stack_t {
 fields {
  byte : 8;
 }
}

header byte_stack_t byte_stack[64];
# 23 "src/hyperv.p4" 2
# 1 "src/include/field-lists.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




# 1 "src/include/config.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.

 *

 * Licensed under the Apache License, Version 2.0 (the "License");

 * you may not use this file except in compliance with the License.

 * You may obtain a copy of the License at

 *

 *   http://www.apache.org/licenses/LICENSE-2.0

 *

 * Unless required by applicable law or agreed to in writing, software

 * distributed under the License is distributed on an "AS IS" BASIS,

 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

 * See the License for the specific language governing permissions and

 * limitations under the License.

 */
# 20 "src/include/field-lists.p4" 2



/****************************************************
 * Metadata instances
 ***************************************************/

/****************************************************
 * Field list for resubmit and recirculate
 ***************************************************/
field_list flInstance_with_umeta {
    vdp_metadata;
    user_metadata;
    standard_metadata;
}

field_list digest_list {
    user_metadata.meta;
    standard_metadata;
}

field_list watch_digist_list {
 user_metadata.load_header;
}

field_list debug_digist_list {
 user_metadata.meta;
 user_metadata.load_header;
}
# 24 "src/hyperv.p4" 2
# 1 "src/include/metadata.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/****************************************************
 * vdp_metadata_t
 * Vritual data plane metadata for control and stage
 ***************************************************/
header_type vdp_metadata_t {
 fields {
  // Identifiers
  vdp_id : 16;
  inst_id : 8 ;
  stage_id : 8 ;

  // Action block variables
  action_chain_id : 48;
  action_chain_bitmap : 48;

  // Match block variable
  match_chain_result : 48;
  match_chain_bitmap : 3 ;

  recirculation_flag : 1 ;
  remove_or_add_flag : 1 ;
  mod_flag : 1 ;
 }
}

metadata vdp_metadata_t vdp_metadata;

/****************************************************
 * user_metadata_t
 * Reserved meta-data for programs
 ***************************************************/
header_type user_metadata_t {
 fields {
  meta : 256;
  load_header : 800;
 }
}

metadata user_metadata_t user_metadata;

/****************************************************
 * context_metadata_t
 * Context data and intermediate variables for  * arithmetical logic
c
 ***************************************************/
header_type context_metadata_t {
 fields {
  r1 : 16;
  r2 : 16;
  r3 : 16;
  r4 : 16;
  r5 : 32;
  op : 2 ;
  left_expr : 16 ;
  right_expr : 16 ;
  count : 32 ;
  hash : 32 ;
  hash_header : 800;
 }
}

metadata context_metadata_t context_metadata;
# 25 "src/hyperv.p4" 2
# 1 "src/include/template.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




# 1 "src/include/define.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// primitive actions
# 59 "src/include/define.p4"
// MASK
# 86 "src/include/define.p4"
// STAGE
# 107 "src/include/define.p4"
// Match bitmap
# 20 "src/include/template.p4" 2

//---------------------------------------------------------------------------
/*
 * In the match pipeline, we classify the match fields in a standard match-
 * action table into three types: packet header, standard metadata and user-
 * defined matadata. The fourth table maps the combined result to an action
 * bitmap. In this way we avoid using an exceedingly large match filed in one
 * table to reduce TCAM pressure. A match bitmap is also used to indicate whe-
 * ther a table should be executed or skipped in a match pipeline.
 */
# 107 "src/include/template.p4"
//---------------------------------------------------------------------------
/* Stages can branch to another stage depending on the result of a boolean 
 * expression.
 * table_get_expression_x is used to calculate all types of boolean expressions
 * e.g. header <|=|> const, header <|=|> header, header <|=|> meta
 * counter can only be compared with const?
 */
# 142 "src/include/template.p4"
//hr-modified																	table table_branch_1_##X {														reads {																			vdp_metadata.inst_id : exact ;												vdp_metadata.stage_id : exact ;											}																			actions { 																		set_next_stage; 															set_match_result;														set_action_id; 																set_next_stage_extra;															end;																	}																		}			
# 156 "src/include/template.p4"
//hr-modified																table table_branch_2_##X {														reads {																			vdp_metadata.inst_id : exact ;												vdp_metadata.stage_id : exact ;											}																			actions { 																		set_next_stage;															set_match_result;														set_action_id; 																set_next_stage_extra;															end;																	}																		}		
# 170 "src/include/template.p4"
//hr-modified																	table table_branch_3_##X {														reads {																			vdp_metadata.inst_id : exact ;												vdp_metadata.stage_id : exact ;											}																			actions { 																		set_next_stage;															set_match_result;														set_action_id; 																set_next_stage_extra;															end;																	}																		}																			
# 186 "src/include/template.p4"
//-----------------------------------------------------------------------
/* 
 * 
 */
# 26 "src/hyperv.p4" 2
# 1 "src/include/execute.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




//hr-modified-inserted-head
# 1 "src/include/template.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
# 21 "src/include/execute.p4" 2
# 1 "src/include/define.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// primitive actions
# 59 "src/include/define.p4"
// MASK
# 86 "src/include/define.p4"
// STAGE
# 107 "src/include/define.p4"
// Match bitmap
# 22 "src/include/execute.p4" 2
//hr-modified-inserted-tail

//----------------- execute ------------------------

//------------------ stage 1 -----------------------
control execute_do_stage1 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage1); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage1); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage1); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage1); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage1); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage1); } } table table_add_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage1 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage1 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage1 { type : packets_and_bytes; direct : table_counter_stage1; }

//------------------ stage 2 -----------------------
control execute_do_stage2 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage2); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage2); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage2); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage2); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage2); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage2); } } table table_add_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage2 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage2 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage2 { type : packets_and_bytes; direct : table_counter_stage2; }

//------------------ stage 3 -----------------------
control execute_do_stage3 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage3); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage3); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage3); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage3); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage3); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage3); } } table table_add_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage3 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage3 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage3 { type : packets_and_bytes; direct : table_counter_stage3; }

//------------------ stage 4 -----------------------
control execute_do_stage4 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage4); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage4); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage4); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage4); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage4); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage4); } } table table_add_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage4 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage4 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage4 { type : packets_and_bytes; direct : table_counter_stage4; }

//------------------ stage 5 -----------------------
control execute_do_stage5 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage5); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage5); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage5); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage5); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage5); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage5); } } table table_add_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage5 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage5 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage5 { type : packets_and_bytes; direct : table_counter_stage5; }

//------------------ stage 6 -----------------------
control execute_do_stage6 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage6); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage6); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage6); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage6); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage6); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage6); } } table table_add_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage6 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage6 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage6 { type : packets_and_bytes; direct : table_counter_stage6; }

//------------------ stage 7 -----------------------
control execute_do_stage7 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage7); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage7); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage7); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage7); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage7); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage7); } } table table_add_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage7 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage7 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage7 { type : packets_and_bytes; direct : table_counter_stage7; }

//------------------ stage 8 -----------------------
control execute_do_stage8 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage8); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage8); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage8); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage8); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage8); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage8); } } table table_add_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage8 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage8 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage8 { type : packets_and_bytes; direct : table_counter_stage8; }

//------------------ stage 8 -----------------------
control execute_do_stage9 { if ((vdp_metadata.action_chain_bitmap & (1<<33)) != 0) { apply(table_mod_header_with_meta_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<34)) != 0) { apply(table_mod_meta_with_meta_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<35)) != 0) { apply(table_mod_header_with_header_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<36)) != 0) { apply(table_mod_meta_with_header_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<31)) != 0) { apply(table_mod_header_with_const_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<32)) != 0) { apply(table_mod_meta_with_const_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<0)) != 0) { apply(table_add_header_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<2)) != 0) { apply(table_remove_header_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<37)) != 0) { apply(table_mod_std_meta_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<24)) != 0) { apply(table_generate_digest_stage9); } if ((vdp_metadata.action_chain_bitmap & ((1<<4) | (1<<5)) ) != 0) { apply(table_add_stage9); } if ((vdp_metadata.action_chain_bitmap & ((1<<6) | (1<<7)) ) != 0) { apply(table_subtract_stage9); } if ((vdp_metadata.action_chain_bitmap & ((1<<22) | (1<<23))) != 0) { apply(table_register_stage9); } if ((vdp_metadata.action_chain_bitmap & ((1<<20))) != 0) { apply(table_counter_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<38)) != 0) { apply(table_hash_stage9); } if ((vdp_metadata.action_chain_bitmap & (1<<39)) != 0) { apply(table_action_profile_stage9); } } table table_add_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_with_const; do_add_meta_with_const; do_add_header_with_header; do_add_meta_with_header; do_add_header_with_meta; do_add_meta_with_meta; } } table table_generate_digest_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_gen_digest; } } table table_subtract_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_subtract_const_from_header; do_subtract_const_from_meta; do_subtract_header_from_header; do_subtract_header_from_meta; do_subtract_meta_from_header; do_subtract_meta_from_meta; } } table table_mod_std_meta_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_std_meta; do_loopback; do_forward; do_queue; do_drop; do_multicast; } } table table_mod_header_with_const_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_const; do_mod_header_with_const_and_checksum; } } table table_mod_meta_with_const_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_const; } } table table_mod_header_with_meta_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_meta_1; do_mod_header_with_meta_2; do_mod_header_with_meta_3; } } table table_mod_meta_with_meta_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_meta_1; do_mod_meta_with_meta_2; do_mod_meta_with_meta_3; } } table table_mod_header_with_header_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_header_with_header_1; do_mod_header_with_header_2; do_mod_header_with_header_3; } } table table_mod_meta_with_header_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_mod_meta_with_header_1; do_mod_meta_with_header_2; do_mod_meta_with_header_3; } } table table_add_header_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_add_header_1; } } table table_remove_header_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_remove_header_1; } } table table_hash_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_hash_crc16; do_hash_crc32; } } table table_action_profile_stage9 { reads { vdp_metadata.action_chain_id : exact; } action_profile : hash_profile; } table table_counter_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { packet_count; packet_count_clear; } } table table_register_stage9 { reads { vdp_metadata.action_chain_id : exact; } actions { do_load_register_into_header; do_load_register_into_meta; do_write_header_into_register; do_wirte_meta_into_register; do_wirte_const_into_register; } } counter counter_stage9 { type : packets_and_bytes; direct : table_counter_stage9; }
# 27 "src/hyperv.p4" 2
# 1 "src/include/checksum.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.

 *

 * Licensed under the Apache License, Version 2.0 (the "License");

 * you may not use this file except in compliance with the License.

 * You may obtain a copy of the License at

 *

 *   http://www.apache.org/licenses/LICENSE-2.0

 *

 * Unless required by applicable law or agreed to in writing, software

 * distributed under the License is distributed on an "AS IS" BASIS,

 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

 * See the License for the specific language governing permissions and

 * limitations under the License.

 */
# 23 "src/include/checksum.p4"
//-----------------------------------------------------------
action do_ipv4_checksum(ipv4_offset) {
    modify_field(context_metadata.r5, 0);
    modify_field(context_metadata.r1, ipv4_offset);

    // DST
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    // SRC
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    // Checksum
    add_to_field(context_metadata.r1, 16);

    // TTL + Protocol
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    // FRAG
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    // ID
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    // totalLen
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    // version+IHL+DSCP
    add_to_field(context_metadata.r5, (user_metadata.load_header>>context_metadata.r1) & 0xFFFF);
    add_to_field(context_metadata.r1, 16);

    modify_field(context_metadata.r2, (context_metadata.r5 + (context_metadata.r5>>16)) & 0xFFFF);

    do_mod_header_with_const(context_metadata.r2, 0xFFFF << (context_metadata.r1 + 32));
}

//-----------------------------------------------------------
action do_update_transport_checksum(value1, value2, offset) {
    modify_field(context_metadata.r2, value1);
    add_to_field(context_metadata.r2, ~value2);
    add_to_field(context_metadata.r2, (user_metadata.load_header >> offset) & 0xFFFF);
    do_mod_header_with_const(context_metadata.r2, 0xFFFF << offset);
}


control recalculate_checksum {
    apply(table_checksum);
}

table table_checksum {
    reads {
        vdp_metadata.vdp_id : exact;
    }
    actions {
        do_ipv4_checksum;
        do_update_transport_checksum;
        noop;
    }
}
# 28 "src/hyperv.p4" 2
# 1 "src/include/parser.p4" 1
/* Copyright 2016-present NetArch Lab, Tsinghua University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@pragma header_ordering desc_hdr byte_stack

//--------------------------------parser-------------------------
parser start {
 extract(desc_hdr); // Rapid Parsing
 set_metadata(vdp_metadata.vdp_id, desc_hdr.vdp_id);
 set_metadata(user_metadata.load_header, desc_hdr.load_header);
    return ingress;
}
# 29 "src/hyperv.p4" 2

//-------------------------//hr-modified-inserted-head----------

//#ifndef HYPERVISOR_TEMPLATE
//#define HYPERVISOR_TEMPLATE

//#include "define.p4"

//---------------------------------------------------------------------------
/*
 * In the match pipeline, we classify the match fields in a standard match-
 * action table into three types: packet header, standard metadata and user-
 * defined matadata. The fourth table maps the combined result to an action
 * bitmap. In this way we avoid using an exceedingly large match filed in one
 * table to reduce TCAM pressure. A match bitmap is also used to indicate whe-
 * ther a table should be executed or skipped in a match pipeline.
 */
# 123 "src/hyperv.p4"
//---------------------------------------------------------------------------
/* Stages can branch to another stage depending on the result of a boolean 
 * expression.
 * table_get_expression_x is used to calculate all types of boolean expressions
 * e.g. header <|=|> const, header <|=|> header, header <|=|> meta
 * counter can only be compared with const?
 */
# 158 "src/hyperv.p4"
//hr-modified																	table table_branch_1_##X {														reads {																			vdp_metadata.inst_id : exact ;												vdp_metadata.stage_id : exact ;											}																			actions { 																		set_next_stage; 															set_match_result;														set_action_id; 																set_next_stage_extra;															end;																	}																		}			
# 172 "src/hyperv.p4"
//hr-modified																table table_branch_2_##X {														reads {																			vdp_metadata.inst_id : exact ;												vdp_metadata.stage_id : exact ;											}																			actions { 																		set_next_stage;															set_match_result;														set_action_id; 																set_next_stage_extra;															end;																	}																		}		
# 186 "src/hyperv.p4"
//hr-modified																	table table_branch_3_##X {														reads {																			vdp_metadata.inst_id : exact ;												vdp_metadata.stage_id : exact ;											}																			actions { 																		set_next_stage;															set_match_result;														set_action_id; 																set_next_stage_extra;															end;																	}																		}																			
# 202 "src/hyperv.p4"
//-----------------------------------------------------------------------
/* 
 * 
 */
# 419 "src/hyperv.p4"
//#endif
//-------------------------//hr-modified-inserted-tail----------

//--------------------------------ingress--------------------------
control ingress {
 if (vdp_metadata.inst_id == 0) {
  apply(table_config_at_initial);
 }
 if (vdp_metadata.inst_id != 0 and vdp_metadata.inst_id != 0xFF) {
  //--------------------stage 1-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           10) {
   conditional_stage1();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              1) {
   match_action_stage1();
  }

  //--------------------stage 2-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           11) {
   conditional_stage2();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              2) {
   match_action_stage2();
  }

  //--------------------stage 3-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           12) {
   conditional_stage3();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              3) {
   match_action_stage3();
  }

  //--------------------stage 4-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           13) {
   conditional_stage4();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              4) {
   match_action_stage4();
  }

  //--------------------stage 5-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           14) {
   conditional_stage5();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              5) {
   match_action_stage5();
  }

  //--------------------stage 6-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           15) {
   conditional_stage6();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              6) {
   match_action_stage6();
  }

  //--------------------stage 7-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           16) {
   conditional_stage7();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              7) {
   match_action_stage7();
  }

  //--------------------stage 8-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           17) {
   conditional_stage8();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              8) {
   match_action_stage8();
  }

    //--------------------stage 8-----------------
  if (((vdp_metadata.stage_id & 0x1f)) ==
           18) {
   conditional_stage9();
  }
  if (((vdp_metadata.stage_id & 0x1f)) ==
              9) {
   match_action_stage9();
  }


  if ((vdp_metadata.remove_or_add_flag == 0) and (vdp_metadata.inst_id != 0xFF)) {
   apply(table_config_at_end);
  }
 }
}

//---------conditional stage 1-------------------------
control conditional_stage1 { apply(table_get_expression_stage1); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage1); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage1); } else { apply(table_branch_3_stage1); } } table table_get_expression_stage1 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 2-------------------------
control conditional_stage2 { apply(table_get_expression_stage2); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage2); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage2); } else { apply(table_branch_3_stage2); } } table table_get_expression_stage2 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 3-------------------------
control conditional_stage3 { apply(table_get_expression_stage3); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage3); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage3); } else { apply(table_branch_3_stage3); } } table table_get_expression_stage3 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 4-------------------------
control conditional_stage4 { apply(table_get_expression_stage4); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage4); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage4); } else { apply(table_branch_3_stage4); } } table table_get_expression_stage4 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }
//---------conditional stage 1-------------------------
control conditional_stage5 { apply(table_get_expression_stage5); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage5); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage5); } else { apply(table_branch_3_stage5); } } table table_get_expression_stage5 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 2-------------------------
control conditional_stage6 { apply(table_get_expression_stage6); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage6); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage6); } else { apply(table_branch_3_stage6); } } table table_get_expression_stage6 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 3-------------------------
control conditional_stage7 { apply(table_get_expression_stage7); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage7); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage7); } else { apply(table_branch_3_stage7); } } table table_get_expression_stage7 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 4-------------------------
control conditional_stage8 { apply(table_get_expression_stage8); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage8); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage8); } else { apply(table_branch_3_stage8); } } table table_get_expression_stage8 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------conditional stage 4-------------------------
control conditional_stage9 { apply(table_get_expression_stage9); if (context_metadata.left_expr < context_metadata.right_expr) { apply(table_branch_1_stage9); } else if(context_metadata.left_expr > context_metadata.right_expr) { apply(table_branch_2_stage9); } else { apply(table_branch_3_stage9); } } table table_get_expression_stage9 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; } actions { set_expr_header_op_const; set_expr_header_op_header; set_expr_header_op_meta; set_expr_meta_op_const; set_expr_meta_op_header; set_expr_meta_op_meta; set_expr_counter_op_const; } }

//---------stage 1--------------------------------------
control match_action_stage1 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage1); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage1); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage1); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage1); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage1(); } } table table_header_match_stage1 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage1 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage1 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage1 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 2--------------------------------------
control match_action_stage2 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage2); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage2); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage2); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage2); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage2(); } } table table_header_match_stage2 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage2 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage2 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage2 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 3--------------------------------------
control match_action_stage3 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage3); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage3); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage3); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage3); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage3(); } } table table_header_match_stage3 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage3 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage3 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage3 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 4--------------------------------------
control match_action_stage4 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage4); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage4); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage4); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage4); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage4(); } } table table_header_match_stage4 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage4 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage4 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage4 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 5--------------------------------------
control match_action_stage5 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage5); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage5); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage5); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage5); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage5(); } } table table_header_match_stage5 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage5 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage5 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage5 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 6--------------------------------------
control match_action_stage6 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage6); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage6); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage6); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage6); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage6(); } } table table_header_match_stage6 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage6 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage6 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage6 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 7--------------------------------------
control match_action_stage7 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage7); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage7); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage7); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage7); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage7(); } } table table_header_match_stage7 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage7 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage7 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage7 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 8--------------------------------------
control match_action_stage8 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage8); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage8); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage8); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage8); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage8(); } } table table_header_match_stage8 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage8 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage8 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage8 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//---------stage 8--------------------------------------
control match_action_stage9 { if (vdp_metadata.match_chain_bitmap & 4 != 0) { apply(table_header_match_stage9); } if (vdp_metadata.match_chain_bitmap & 1 != 0) { apply(table_std_meta_match_stage9); } if (vdp_metadata.match_chain_bitmap & 2 != 0) { apply(table_user_meta_stage9); } if (vdp_metadata.match_chain_result != 0) { apply(table_match_result_stage9); } if (vdp_metadata.action_chain_bitmap != 0) { execute_do_stage9(); } } table table_header_match_stage9 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.load_header : ternary ; } actions { set_match_result; set_action_id; set_next_stage; set_action_id_direct; end; set_match_result_with_next_stage; } } table table_std_meta_match_stage9 { reads{ vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; standard_metadata.ingress_port : ternary ; standard_metadata.egress_spec : ternary ; standard_metadata.instance_type : ternary ; } actions { set_match_result; set_action_id; set_next_stage; end; set_action_id_direct; set_match_result_with_next_stage; } } table table_user_meta_stage9 { reads { vdp_metadata.inst_id : exact ; vdp_metadata.stage_id : exact ; user_metadata.meta : ternary; } actions { set_match_result; set_action_id; set_action_id_direct; set_next_stage; set_match_result_with_next_stage; end; } } table table_match_result_stage9 { reads { vdp_metadata.match_chain_result : exact; } actions { set_action_id_direct; set_stage_and_bitmap; set_next_stage; } }

//------------------------egress-----------------------
control egress {
 if (vdp_metadata.remove_or_add_flag == 1) {
  apply(table_config_at_egress);
 }
 else if (vdp_metadata.mod_flag == 1) {
  recalculate_checksum();
  apply(dh_deparse);
 }
}
